#include "pico/stdlib.h"
#include "hardware/gpio.h"
#include <stdio.h>

// Pino do sensor DHT22 conectado ao GPIO
#define DHT_PIN 2

// Função para enviar um pulso de início ao DHT22
void dht_start_signal(uint8_t pin) {
    gpio_set_dir(pin, GPIO_OUT);
    gpio_put(pin, 0);
    sleep_ms(18); // Pulso de início (mínimo 18 ms)
    gpio_put(pin, 1);
    sleep_us(30); // Aguarda o DHT22 responder
    gpio_set_dir(pin, GPIO_IN); // Configura como entrada para receber os dados
}

// Função para esperar por um estado no pino
bool dht_wait_for_state(uint8_t pin, bool state, uint32_t timeout_us) {
    uint32_t start_time = time_us_32();
    while (gpio_get(pin) != state) {
        if (time_us_32() - start_time > timeout_us) {
            return false; // Tempo excedido
        }
    }
    return true;
}

// Função para ler dados do sensor DHT22
bool dht_read(uint8_t pin, float *temperature, float *humidity) {
    uint8_t data[5] = {0}; // 5 bytes de dados do sensor

    // Envia o sinal de início
    dht_start_signal(pin);

    // Aguarda o sensor responder
    if (!dht_wait_for_state(pin, 0, 80) || !dht_wait_for_state(pin, 1, 80)) {
        return false; // Falha na comunicação
    }

    // Lê os 40 bits de dados (5 bytes)
    for (int i = 0; i < 40; i++) {
        // Aguarda o início do pulso de dados
        if (!dht_wait_for_state(pin, 0, 50)) {
            return false;
        }

        // Mede a duração do pulso alto
        uint32_t start_time = time_us_32();
        if (!dht_wait_for_state(pin, 1, 70)) {
            return false;
        }
        uint32_t pulse_duration = time_us_32() - start_time;

        // Bit 1 se o pulso alto for maior que ~40 µs
        data[i / 8] <<= 1;
        if (pulse_duration > 40) {
            data[i / 8] |= 1;
        }
    }

    // Verifica o checksum
    if ((data[0] + data[1] + data[2] + data[3]) != data[4]) {
        return false; // Checksum inválido
    }

    // Converte os dados em temperatura e umidade
    *humidity = ((data[0] << 8) + data[1]) / 10.0;
    *temperature = ((data[2] << 8) + data[3]) / 10.0;

    return true; // Leitura bem-sucedida
}

int main() {
    //stdio_init_all(); // Inicializa o UART para saída serial

    while (true) {
        float temperature, humidity;
        if (dht_read(DHT_PIN, &temperature, &humidity)) {
          printf("Deu certo!");
          printf("Temperatura: %.1f°C, Umidade: %.1f%%\n", temperature, humidity);
        } else {
          printf("Falha ao ler dados do sensor!\n");
        }
        sleep_ms(2000); // Ler os dados a cada 2 segundos
    }

    return 0;
}
